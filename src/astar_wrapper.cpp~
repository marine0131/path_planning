#include <iostream>
#include <limits>
#include <algorithm>
#include <vector>
using namespace std;

#include "opencv2/opencv.hpp"
#include "opencv2/highgui/highgui.hpp" 
using namespace cv;

#include "time.h"
#include "../include/astar.hpp"

bool generatePath(int start, int end)
{
    clock_t t_start, t_finish;
    t_start = clock();

    Mat maze = imread("../maze_small.png");
    int Row = maze.rows;
    int Col = maze.cols;
   
    Mat grid;
    cvtColor(maze, grid, cv::COLOR_BGR2GRAY);
    
    
    // start is the first white block in the top row
    for(int i=0;i<Col;++i)
    {
        uchar pixel = grid.at<uchar>(0, i);
        if ((int)pixel > 0)
        {
            start = i;
            break;
        }
    }
    
    // end is the first white block in the final column
    for(int j=0;j<Row;++j)
    {
        uchar pixel = grid.at<uchar>(j, Col-1);
        if ((int)pixel > 0)
        {
            end = j;
            break;
        }
    }
    
    end = Col*(end+1)-1;

    // start = 0;
    // end = (Row -1) * Col - 1;

    float* matrix = new float [Row*Col];
    float INF = numeric_limits<float>::infinity(); 

    // cout << Row*Col << endl;
    for(int i=0;i<Row;++i)
    {
        for(int j=0;j<Col;++j)
        {
            uchar pixel = grid.at<uchar>(i,j);
            unsigned int idx = i*Col+j;


            if (pixel < 10)
                matrix[idx] = INF;
            else if (pixel > 200)
                matrix[idx] = 1.0;
            // cout << idx << "," << matrix[idx] << "," << (int)pixel << endl;
        }
        
    }
    grid.release();

    // cout << start << ", " << end << endl;
       

    int* paths = new int[Row*Col];
    
    astar(matrix, Row, Col, start, end, paths);
    
    // for (unsigned int idx=0; idx<Row*Col; ++idx)
    //      cout << (paths[idx]) << endl;

    delete[] matrix;
    
    int path_idx = end;
    
    while(path_idx != start)
    {
        // cout << paths[path_idx] << endl;
        // convert 1D index to 2D index
        int i = path_idx/Col;
        int j = path_idx - (i*Col);
        // cout << i << ", " << j << endl;
        maze.at<Vec3b>(i,j)[0] = 0;
        maze.at<Vec3b>(i,j)[1] = 0;
        maze.at<Vec3b>(i,j)[2] = 255;
        
        path_idx = paths[path_idx];
    }

    delete[] paths;
    
    imwrite("sol.png", maze);
    // imshow("path", maze);
    // waitKey(0);
    t_finish = clock();
    float duration = (float)(t_finish - t_start) / CLOCKS_PER_SEC;

    cout << "execution time: " << duration << endl;
    
    return true;
}


int main(int argc, char** argv)
{
    generatePath(0, 0);
    return 0;
}
